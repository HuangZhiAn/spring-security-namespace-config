Web.xml：
	//add filter
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

Tips:

1.Security congfig xml file is supported to start with "beans:beans" to be include in the application context.

2.The <http> element is responsible for creating a FilterChainProxy and the filter beans

<intercept-url> is to config url access control,when there is more than a <intercept-url> and url config conflicts,the framework will use the first config.As the doc say:

You can use multiple <intercept-url> elements to define different access requirements for different sets of URLs, but they will be evaluated in the order listed and the first match will be used. 

3.We can have multiple <authentication-provider>

4.Disable csrf 
<csrf disabled="true"/>

5.<form-login login-page="/view/loginPage.html"/>
cannot use "classpath:" to specify a login page

6.use-expressions="true" default is true 
when it's true, we are supported to use expressions like this: access="hasRole('USER')"

7.Customing a UserDetailService, when the user is not exist,we need to throw UsernameNotFoundException.

8.when we need to custom sql to fix our database,we can add the provider blow.Don't forget to override the sql.
<authentication-provider>
            <!--数据库中取用户数据，自定义sql-->
            <jdbc-user-service data-source-ref="dataSource" users-by-username-query="select username,password,1 as enabled from account WHERE username=?"
                                        authorities-by-username-query="select u.username, r.name as role from account u,b_user_role ur, b_role r where u.id=ur.user_id and r.id = ur.role_id and u.username=?"/>
        </authentication-provider>



Example code:
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security.xsd">

    <!--配置security为none,访问pattern所包含的url时，将跳过spring security框架-->
    <http pattern="/view/loginPage.html" security="none"></http>

    <!--http元素用于配置访问控制和登录验证-->
    <http use-expressions="true">
        <!--使csrf不可用 TUDO 自定义登录页，使用csrf，不使用模板-->
        <csrf disabled="true"/>
        <intercept-url pattern="/view/loginPage.html" access="isAnonymous()"/>
        <intercept-url pattern="/view/adminPage.html" access="hasRole('ADMIN')" />
        <intercept-url pattern="/**" access="hasRole('USER')" />
        <form-login login-page="/view/loginPage.html" />
        <logout />
    </http>

    <!--配置用户信息来源 TUDO 自定义用户数据来源，从数据库中取数据-->
    <authentication-manager>
        <authentication-provider user-service-ref="customUserDetailService"> <!--自定义UserDetailService-->
        </authentication-provider>
        <authentication-provider>
            <!--从配置文件中读用户信息-->
            <user-service>
                <user name="jimi" password="jimispassword" authorities="ROLE_USER, ROLE_ADMIN" />
                <user name="bob" password="bobspassword" authorities="ROLE_USER" />
            </user-service>
        </authentication-provider>
        <authentication-provider>
            <!--数据库中取用户数据，自定义sql-->
            <jdbc-user-service data-source-ref="dataSource" users-by-username-query="select username,password,1 as enabled from account WHERE username=?"
                                        authorities-by-username-query="select u.username, r.name as role from account u,b_user_role ur, b_role r where u.id=ur.user_id and r.id = ur.role_id and u.username=?"/>
        </authentication-provider>
    </authentication-manager>

    <beans:import resource="application-context.xml"></beans:import>

</beans:beans>